intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
import intf_libs += libodb%lib{odb}
import intf_libs += libcrails%lib{crails}
import intf_libs += libcrails-databases%lib{crails-databases}
import intf_libs += libbacktrace%lib{backtrace}

if ($config.libcrails_odb.odb_with_sqlite == true)
  import intf_libs += libodb-sqlite%lib{odb-sqlite}
if ($config.libcrails_odb.odb_with_pgsql == true)
  import intf_libs += libodb-pgsql%lib{odb-pgsql}
if ($config.libcrails_odb.odb_with_mysql == true)
  import intf_libs += libodb-mysql%lib{odb-mysql}

lib{crails-odb}: {hxx ixx txx cxx}{** -crails/odb/version -crails/odb/backends -crails/odb/id_type} hxx{crails/odb/version crails/odb/backends crails/odb/id_type} $impl_libs $intf_libs

hxx{crails/odb/version}: in{crails/odb/version} $src_root/manifest
hxx{crails/odb/backends}: in{crails/odb/backends}
hxx{crails/odb/id_type}: in{crails/odb/id_type}

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cxx.poptions += -DLIBCRAILS_ODB_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DLIBCRAILS_ODB_SHARED_BUILD

# Export options.
#
lib{crails-odb}:
{
  cxx.export.poptions = "-I$out_root/libcrails-odb/" "-I$src_root/libcrails-odb/"
  cxx.export.libs = $intf_libs
}

liba{crails-odb}: cxx.export.poptions += -DLIBCRAILS_ODB_STATIC
libs{crails-odb}: cxx.export.poptions += -DLIBCRAILS_ODB_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{crails-odb}: bin.lib.version = "-$version.project_id"
else
  lib{crails-odb}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libcrails-odb/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/
  install.subdirs = true
}
